schema {
  query: Query
  mutation: Mutation
}

type Query {
  ####
  # For all queries that return Paginated lists of items:
  #
  # The 'limit' argument:
  #  - may be set to values from 1 to 100, inclusive
  #  - defaults to 20 if left unset
  #  - is an upper bound on the number of items returned. Note that just because less items are
  #    returned than 'limit', that does *not* indicate their are no more items available.
  #
  # The 'nextToken' argument / response field:
  #  - in a response, if set to null, that indicates there are no more items available on the server
  #  - if set to a non-null value (ie an opaque string), then that string can be passed as the `nextToken`
  #    argument in a subsequent call of the same query to retrieve more items starting from where the last
  #    result set ended
  ####

  # The caller's user object, or throw an error
  self: User!

  # A user's user object, if it exists
  user(userId: ID!): User

  # Search users
  searchUsers(searchToken: String!, limit: Int, nextToken: String): PaginatedUsers!

  # Globally trending users
  trendingUsers(limit: Int, nextToken: String): PaginatedUsers!

  # Get the list of users we have blocked
  #  - ordered by blockedAt, most recent first
  getBlockedUsers(limit: Int, nextToken: String): PaginatedUsers!

  # Get caller's feed
  getFeed(limit: Int, nextToken: String): PaginatedPosts!

  # Get a list of Users we follow that currently have stories
  #  - ordered by user-with-story-closest-to-expiring-first
  getFollowedUsersWithStories(limit: Int, nextToken: String): PaginatedUsers!

  # Get list of user's stories
  #  - userId defaults to caller's userId if unset
  #  - if this is a private user, we must be following the user
  #  - ordered by soonest-to-expire-first
  getStories(userId: ID, limit: Int, nextToken: String): PaginatedPosts!

  # Globally trending posts
  trendingPosts(limit: Int, nextToken: String): PaginatedPosts!

  # Get a user's posts.
  #  - userId defaults to caller's userId if unset
  #  - postStatus defaults to COMPLETED if unset
  #  - if we are looking at someone else's posts (ie userId is set and not to caller's userId),
  #    then postStatus cannot be set to anything other than COMPLETED (and we must have access
  #    to the user's posts, if the user is a private user)
  getPosts(userId: ID, postStatus: PostStatus, limit: Int, nextToken: String): PaginatedPosts!

  # Get a specific post.
  #  - if this post belongs to someone else, then it is only visible if postStatus is COMPLETED
  #    (and we must have access to the post, if the owner of the post is a private user)
  getPost(postId: ID!): Post

  # Get a user's MediaObjects.
  #  - userId defaults to caller's userId if unset
  #  - mediaStatus defaults to UPLOADED if unset
  #  - mediaType defaults to IMAGE if unset
  #  - if we are looking at someone else's media (ie userId is set and not to caller's userId),
  #    then mediaStatus cannot be set to anything other than UPLOADED (and we must have access
  #    to the  users's posts, if the user is a private user)
  getMediaObjects(userId: ID, mediaStatus: MediaObjectStatus, mediaType: MediaObjectType, limit: Int, nextToken: String): PaginatedMediaObjects!
}

type Mutation {
  # Set up a new user account
  createCognitoOnlyUser(username: String!, fullName: String): User
  createGoogleUser(username: String!, fullName: String, googleIdToken: String!): User
  createFacebookUser(username: String!, fullName: String, facebookAccessToken: String!): User

  # Change email, with verification. Use these mutations - do not update the user pool directly.
  startChangeUserEmail(email: AWSEmail!): User
  finishChangeUserEmail(cognitoAccessToken: String!, verificationCode: String!): User

  # Change phone, with verification. Use these mutations - do not update the user pool directly.
  startChangeUserPhoneNumber(phoneNumber: AWSPhone!): User
  finishChangeUserPhoneNumber(cognitoAccessToken: String!, verificationCode: String!): User

  # Reset the caller's user account to its initial state (primarily for integration testing)
  #  - excluding cognito, all state associated with user is deleted - including followers, others's comments on our posts, etc
  #  - the user's preferred_username in congito will be deleted
  #  - if the `newUsername` argument is set, then the caller's account will be re-initialized with the given username.
  #    This is equivalent to calling Mutation.createCognitoOnlyUser(username: $newUsername) directly after this call.
  resetUser(newUsername: String): User

  # Set optional user details.
  # Only the specified arguments will be set.
  # To delete an String/ID argument, set it to the empty string (ie bio="").
  setUserDetails(
    username: String,
    fullName: String,
    bio: String,
    photoMediaId: ID,
    privacyStatus: PrivacyStatus,
    followCountsHidden: Boolean,
    viewCountsHidden: Boolean,
    commentsDisabled: Boolean,
    likesDisabled: Boolean,
    verificationHidden: Boolean,
    languageCode: String,
    themeCode: String
  ): User

  # Set the accepted version of the EULA
  setUserAcceptedEULAVersion(version: String!): User

  # Follow or unfollow a user
  # If the user has a private profile, followUser will create a follow request
  followUser(userId: ID!): User
  unfollowUser(userId: ID!): User

  # Accept or Deny follow requests
  acceptFollowerUser(userId: ID!): User
  denyFollowerUser(userId: ID!): User

  # Block/unblock a user
  blockUser(userId: ID!): User
  unblockUser(userId: ID!): User

  # Add a Post
  #   - postId and the mediaId's should be random v4 uuid's generated client-side.
  #   - lifetime should be a ISO Duration string. Ex: 1 day: 'P1D', 1 week: 'P7D', 1 month: 'P1M', 1 year: 'P1Y'
  #   - if lifetime is unset, defaults to infinite
  addPost(
    postId: ID!,
    lifetime: String,
    text: String,
    mediaObjectUploads: [MediaObjectUpload!],
    commentsDisabled: Boolean,
    likesDisabled: Boolean,
    verificationHidden: Boolean,
  ): Post

  # Edit a Post
  editPost(
    postId: ID!,
    text: String,
    commentsDisabled: Boolean,
    likesDisabled: Boolean,
    verificationHidden: Boolean,
  ): Post

  # Edit Post.expiresAt
  #   - leave expiresAt unset, or set it to null to make the post last forever
  #   - setting expiresAt to a value in the past is an error
  #   - trying to edit a post that is not ours is an error
  editPostExpiresAt(postId: ID!, expiresAt: AWSDateTime): Post

  # Flag a Post as inappropriate
  #   - trying to flag a post we do not have access to is an error
  flagPost(postId: ID!): Post

  # Delete a Post and all of its media
  deletePost(postId: ID!): Post

  # Archive a Post
  #   - can only be done to your own posts
  #   - removes the post from followers feeds, stories
  #   - makes the post and media objects only visible to yourself
  archivePost(postId: ID!): Post

  # Restore an archived post, and any media it has
  restoreArchivedPost(postId: ID!): Post

  # Post likes
  #   - trying to like a post we do not have access to is an error
  #   - onymously means non-anonymously
  onymouslyLikePost(postId: ID!): Post
  anonymouslyLikePost(postId: ID!): Post
  dislikePost(postId: ID!): Post

  # Report post views
  reportPostViews(postIds: [ID!]!): Boolean

  # These are for testing the error logging & alerting system.
  lambdaClientError(arg1: String, arg2: String): String
  lambdaServerError(arg1: String, arg2: String): String
}

type User {

  # public info readable by all logged-in users, including blocked users
  userId: ID!
  username: String!

  # public info, readable by all logged-in non-blocked users
  photoUrl: AWSURL
  photoUrl64p: AWSURL
  photoUrl480p: AWSURL
  photoUrl1080p: AWSURL
  photoUrl4k: AWSURL
  privacyStatus: PrivacyStatus
  followedStatus: FollowStatus!  # is the caller following them?
  followerStatus: FollowStatus!  # are they following the caller?
  postCount: Int!  # only posts with COMPLETED status
  fullName: String
  themeCode: String
  blockedAt: AWSDateTime  # has the caller blocked this user, and if so, when?
  blockerAt: AWSDateTime  # have they blocked the caller, and if so, when?
  followedCount: Int  # null when looking at someone else's profile who is hidding follow counts
  followerCount: Int  # null when looking at someone else's profile who is hidding follow counts
  signedUpAt: AWSDateTime

  # Sum of user's posts' viewedByCount
  #   - null if user has viewCountsHidden set
  postViewedByCount: Int

  # if user is private: readable by followers and user themselves only
  # else: readable by all
  bio: String

  # private to user themselves only
  email: AWSEmail
  phoneNumber: AWSPhone
  languageCode: String
  acceptedEULAVersion: String
  followCountsHidden: Boolean
  viewCountsHidden: Boolean
  commentsDisabled: Boolean
  likesDisabled: Boolean
  verificationHidden: Boolean

  # List of posts the user has anonymously liked
  #  - private to user themselves only
  #  - ordered with most recently liked post first
  anonymouslyLikedPosts(limit: Int, nextToken: String): PaginatedPosts

  # List of posts the user has onymously liked
  #  - if the user has blocked caller, will be null
  #  - ordered with most recently liked post first
  onymouslyLikedPosts(limit: Int, nextToken: String): PaginatedPosts

  # List of users the user follows
  #  - null for users with followCountsHidden set, or if user has blocked caller
  #  - followStatus cannot be set to NOT_FOLLOWING
  #  - followStatus can be set to values different from the default only when looking at our own user
  followedUsers(followStatus: FollowStatus = FOLLOWING, limit: Int, nextToken: String): PaginatedUsers

  # List of users that follow the user
  #  - null for users with followCountsHidden set, or if user has blocked caller
  #  - followStatus cannot be set to NOT_FOLLOWING
  #  - followStatus can be set to values different from the default only when looking at our own user
  followerUsers(followStatus: FollowStatus = FOLLOWING, limit: Int, nextToken: String): PaginatedUsers
}

type PaginatedUsers {
  items: [User!]!
  nextToken: String
}

enum PrivacyStatus {
  PUBLIC
  PRIVATE
}

enum FollowStatus {
  NOT_FOLLOWING
  FOLLOWING
  SELF
  REQUESTED
  DENIED
}

enum MediaObjectType {
  IMAGE
  VIDEO
  AUDIO
}

enum MediaObjectStatus {
  AWAITING_UPLOAD
  UPLOADING
  PROCESSING_UPLOAD
  UPLOADED
  ERROR
  ARCHIVED
  DELETING
}

enum PostStatus {
  PENDING
  COMPLETED
  ERROR
  ARCHIVED
  DELETING
}

enum LikeStatus {
  ONYMOUSLY_LIKED
  ANONYMOUSLY_LIKED
  NOT_LIKED
}

enum FlagStatus {
  FLAGGED
  NOT_FLAGGED
}

input MediaObjectUpload {
  mediaId: ID!
  mediaType: MediaObjectType!
  takenInReal: Boolean
  originalFormat: String
}

type MediaObject {
  mediaId: ID!
  mediaType: MediaObjectType!
  mediaStatus: MediaObjectStatus  # null & 'UPLOADED' are synonymous
  isVerified: Boolean!
  url: AWSURL
  url64p: AWSURL
  url480p: AWSURL
  url1080p: AWSURL
  url4k: AWSURL
  uploadUrl: AWSURL
  width: Int
  height: Int
}

type PaginatedMediaObjects {
  items: [MediaObject!]!
  nextToken: String
}

type Post {
  postId: ID!
  postedAt: AWSDateTime!
  postedBy: User!
  postStatus: PostStatus  # null & 'COMPLETED' are synonymous
  expiresAt: AWSDateTime  # null indicates no expiration
  text: String
  textTaggedUsers: [TextTaggedUser!]!  # max of 100
  mediaObjects: [MediaObject!]!
  flagStatus: FlagStatus!  # has the caller flagged this post?
  likeStatus: LikeStatus!  # has the caller liked this post?
  commentsDisabled: Boolean
  likesDisabled: Boolean
  verificationHidden: Boolean
  onymousLikeCount: Int  # onymous means non-anonymous, null if likes are disabled
  anonymousLikeCount: Int  # null if likes disabled

  # Count of unique users who have viewed this post
  #   - null if user has viewCountsHidden set
  viewedByCount: Int

  # Unique users who have viewed this post
  #   - ordered by when post was last viewed by user, most recent first
  #   - visible only to owner of the post
  #   - null if user has viewCountsHidden set
  viewedBy(limit: Int, nextToken: String): PaginatedUsers

  # Users that have onymously liked this post
  #   - ordered with first like first
  #   - null if likes are disabled
  onymouslyLikedBy(limit: Int, nextToken: String): PaginatedUsers
}

type PaginatedPosts {
  items: [Post!]!
  nextToken: String
}

type TextTaggedUser {
  tag: String!  # ex: '@ian'
  user: User    # null if user has been deleted, or has blocked caller
}
