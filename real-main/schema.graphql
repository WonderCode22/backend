schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  ####
  # For queries that return paginated lists of items:
  #
  # The 'limit' argument:
  #   - may be set to values from 1 to 100, inclusive
  #   - defaults to 20 if left unset
  #   - is an upper bound on the number of items returned. Note that just because less items are
  #     returned than 'limit', that does *not* indicate their are no more items available.
  #
  # The 'nextToken' argument / response field:
  #   - in a response, if set to null, that indicates there are no more items available on the server
  #   - if set to a non-null value (ie an opaque string), then that string can be passed as the `nextToken`
  #     argument in a subsequent call of the same query to retrieve more items starting from where the last
  #     result set ended
  #
  # The 'reverse' argument:
  #   - defaults to False if left unset
  #   - not present on all queries that return paginated lists
  ####

  # The caller's user object, or throw an error
  self: User!

  # A user's user object, if it exists
  user(userId: ID!): User

  # Search users
  searchUsers(searchToken: String!, limit: Int, nextToken: String): PaginatedUsers!

  # Globally trending users
  trendingUsers(limit: Int, nextToken: String): PaginatedUsers!

  # A specific post
  #   - posts that do not have COMPLETED postStatus are private to only the post owner
  #   - posts of private users are private to only themselves and their followers
  post(postId: ID!): Post

  # Globally trending posts
  trendingPosts(limit: Int, nextToken: String): PaginatedPosts!

  # A specific album
  #   - albums of a private user are private to only themselves and their followers
  album(albumId: ID!): Album

  # A specific chat
  #   - chats are private to just the users within them
  chat(chatId: ID!): Chat
}

type Mutation {
  # Set up a new user account
  createCognitoOnlyUser(username: String!, fullName: String): User
  createGoogleUser(username: String!, fullName: String, googleIdToken: String!): User
  createFacebookUser(username: String!, fullName: String, facebookAccessToken: String!): User

  # Change email, with verification. Use these mutations - do not update the user pool directly.
  startChangeUserEmail(email: AWSEmail!): User
  finishChangeUserEmail(cognitoAccessToken: String!, verificationCode: String!): User

  # Change phone, with verification. Use these mutations - do not update the user pool directly.
  startChangeUserPhoneNumber(phoneNumber: AWSPhone!): User
  finishChangeUserPhoneNumber(cognitoAccessToken: String!, verificationCode: String!): User

  # Reset the caller's user account to its initial state (primarily for integration testing)
  #   - excluding cognito, all state associated with user is deleted - including followers, others's comments on our posts, etc
  #   - the user's preferred_username in congito will be deleted
  #   - if the `newUsername` argument is set, then the caller's account will be re-initialized with the given username.
  #     This is equivalent to calling Mutation.createCognitoOnlyUser(username: $newUsername) directly after this call.
  resetUser(newUsername: String): User

  # Set optional user details.
  # Only the specified arguments will be set.
  # To delete an String/ID argument, set it to the empty string (ie bio="").
  setUserDetails(
    username: String,
    fullName: String,
    bio: String,
    photoPostId: ID,  # must be refer to a completed image post
    privacyStatus: PrivacyStatus,
    followCountsHidden: Boolean,
    viewCountsHidden: Boolean,
    commentsDisabled: Boolean,
    likesDisabled: Boolean,
    sharingDisabled: Boolean,
    verificationHidden: Boolean,
    languageCode: String,
    themeCode: String
  ): User

  # Set the accepted version of the EULA
  setUserAcceptedEULAVersion(version: String!): User

  # Follow or unfollow a user
  # If the user has a private profile, followUser will create a follow request
  followUser(userId: ID!): User
  unfollowUser(userId: ID!): User

  # Accept or Deny follow requests
  acceptFollowerUser(userId: ID!): User
  denyFollowerUser(userId: ID!): User

  # Block/unblock a user
  blockUser(userId: ID!): User
  unblockUser(userId: ID!): User

  # Add a Post
  #   - postId and the mediaId's should be random v4 uuid's generated client-side.
  #   - lifetime should be a ISO Duration string. Ex: 1 day: 'P1D', 1 week: 'P7D', 1 month: 'P1M', 1 year: 'P1Y'
  #   - if lifetime is unset, defaults to infinite
  addPost(
    postId: ID!,
    postType: PostType,  # defaults to IMAGE if not supplied
    albumId: ID,
    lifetime: String,
    text: String,
    mediaObjectUploads: [MediaObjectUpload!],  # DEPRECATED. Use imageInput instead
    imageInput: ImageInput,
    commentsDisabled: Boolean,
    likesDisabled: Boolean,
    sharingDisabled: Boolean,
    verificationHidden: Boolean,
  ): Post

  # Edit a Post
  editPost(
    postId: ID!,
    text: String,
    commentsDisabled: Boolean,
    likesDisabled: Boolean,
    sharingDisabled: Boolean,
    verificationHidden: Boolean,
  ): Post

  # Edit Post.album
  #   - to remove the post from its album, set albumId to null
  #   - to change which album the post is in, set albumId to the id of the new album
  editPostAlbum(postId: ID!, albumId: ID): Post

  # Edit the order in which a Post appears in an Album
  #   - the Posts identified by postId and precedingPostId must be in the same Album
  #   - if precedingPostId is non-null, postId will be placed directly after it
  #   - if precedingPostId is null, postId will be placed at the front
  editPostAlbumOrder(postId: ID!, precedingPostId: ID): Post

  # Edit Post.expiresAt
  #   - leave expiresAt unset, or set it to null to make the post last forever
  #   - setting expiresAt to a value in the past is an error
  #   - trying to edit a post that is not ours is an error
  editPostExpiresAt(postId: ID!, expiresAt: AWSDateTime): Post

  # Flag a Post as inappropriate
  #   - trying to flag a post we do not have access to is an error
  flagPost(postId: ID!): Post

  # Delete a Post
  deletePost(postId: ID!): Post

  # Archive a Post
  #   - can only be done to your own posts
  #   - removes the post from followers feeds, stories
  #   - makes the post only visible to yourself
  archivePost(postId: ID!): Post

  # Restore an archived post
  restoreArchivedPost(postId: ID!): Post

  # Post likes
  #   - trying to like a post we do not have access to is an error
  #   - onymously means non-anonymously
  onymouslyLikePost(postId: ID!): Post
  anonymouslyLikePost(postId: ID!): Post
  dislikePost(postId: ID!): Post

  # Report post views
  reportPostViews(postIds: [ID!]!): Boolean

  # Add a comment
  #   - trying to comment on a post we do not have access to is an error
  #   - trying to comment on a post that has comments disabled is an error
  #   - commentId should be a client-side generated uuidv4
  addComment(commentId: ID!, postId: ID!, text: String!): Comment

  # Delete a comment
  #   - deleting a comment that is neither ours nor on a post of ours is an error
  deleteComment(commentId: ID!): Comment

  # Report comment views
  reportCommentViews(commentIds: [ID!]!): Boolean

  addAlbum(albumId: ID!, name: String!, description: String): Album
  # Edit an Album
  #   - attributes to be left unchanged should be left undefined or set to null
  #   - to remove string attribute, set it to the empty string
  #   - Album.name is a required attribute so trying to remove it is an error
  editAlbum(albumId: ID!, name: String, description: String): Album
  deleteAlbum(albumId: ID!): Album

  # Chats
  #   - there may exist at most one direct chat between two users
  #   - it is an error to try to add someone to or leave from a direct chat
  #   - when creating a chat, the first message must be included
  createDirectChat(chatId: ID!, userId: ID!, messageId: ID! messageText: String!): Chat
  createGroupChat(chatId: ID!, name: String, userIds: [ID!]!, messageId: ID!, messageText: String!): Chat
  editGroupChat(chatId: ID!, name: String!): Chat
  addToGroupChat(chatId: ID!, userIds: [ID!]!): Chat
  leaveGroupChat(chatId: ID!): Chat

  # Chat messages
  #   - may only be edited or deleted by message author
  addChatMessage(chatId: ID!, messageId: ID!, text: String!): ChatMessage
  editChatMessage(messageId: ID!, text: String!): ChatMessage
  deleteChatMessage(messageId: ID!): ChatMessage
  reportChatMessageViews(messageIds: [ID!]!): Boolean

  # Used internally to fire subscription events. Calling externally is an error.
  triggerChatMessageNotification(input: ChatMessageNotificationInput!): ChatMessageNotification!
  triggerPostNotification(input: PostNotificationInput!): PostNotification!

  # These are for testing the error logging & alerting system.
  lambdaClientError(arg1: String, arg2: String): String
  lambdaServerError(arg1: String, arg2: String): String
  dynamoServerError(arg1: String, arg2: String): String
}

type Subscription {
  # Fires for changes (adds, edits, deletes) to chat messages in chats we are in or have just been added to
  #   - userId must be caller's own userId
  #   - does not fire for the caller's own messages
  onChatMessageNotification(userId: ID!): ChatMessageNotification @aws_subscribe(mutations: ["triggerChatMessageNotification"])

  # Fires for some changes (see PostNotificationType) to callers's own posts
  #   - userId must be caller's own userId
  onPostNotification(userId: ID!): PostNotification @aws_subscribe(mutations: ["triggerPostNotification"])
}

type User {

  # public info readable by all logged-in users, including blocked users
  userId: ID!
  username: String!

  # public info, readable by all logged-in non-blocked users
  privacyStatus: PrivacyStatus
  followedStatus: FollowStatus!  # is the caller following them?
  followerStatus: FollowStatus!  # are they following the caller?
  fullName: String
  themeCode: String
  signedUpAt: AWSDateTime
  photo: Image

  blockedStatus: BlockStatus!  # is the caller blocking them?
  blockerStatus: BlockStatus!  # are they blocking the caller?

  # Sum of user's posts' viewedByCount
  #   - null if user has viewCountsHidden set
  postViewedByCount: Int

  # User's bio
  #   - the bio of a private user is private to only themselves and their followers
  bio: String

  # private to user themselves only
  email: AWSEmail
  phoneNumber: AWSPhone
  languageCode: String
  acceptedEULAVersion: String
  followCountsHidden: Boolean
  viewCountsHidden: Boolean
  commentsDisabled: Boolean
  likesDisabled: Boolean
  sharingDisabled: Boolean
  verificationHidden: Boolean

  # User's feed
  #   - private to the user themselves only
  #   - ordered by postedAt, most recently posted first
  feed(limit: Int, nextToken: String): PaginatedPosts

  # User's stories
  #   - stories of a private user are private to only themselves and their followers
  #   - ordered by expiresAt, with the next to expire first
  stories(limit: Int, nextToken: String): PaginatedPosts

  # User's posts
  #   - postStatus defaults to COMPLETED if unset
  #   - when looking at another user's posts, postStatus may only be set to COMPLETED
  #   - posts of a private user are private to only themselves and their followers
  posts(postStatus: PostStatus, postType: PostType, limit: Int, nextToken: String): PaginatedPosts
  postCount: Int  # only posts with COMPLETED status

  # Do any of the user's posts have Post.hasNewCommentActivity set?
  #   - private to user themselves only
  postHasNewCommentActivity: Boolean

  # Posts the user has anonymously liked
  #   - private to user themselves only
  #   - ordered with most recently liked post first
  anonymouslyLikedPosts(limit: Int, nextToken: String): PaginatedPosts

  # Posts the user has onymously liked
  #   - if the user has blocked caller, will be null
  #   - ordered with most recently liked post first
  onymouslyLikedPosts(limit: Int, nextToken: String): PaginatedPosts

  # Users the user follows
  #   - null for users with followCountsHidden set, or if user has blocked caller
  #   - followStatus cannot be set to NOT_FOLLOWING
  #   - followStatus can be set to values different from the default only when looking at our own user
  followedUsers(followStatus: FollowStatus = FOLLOWING, limit: Int, nextToken: String): PaginatedUsers
  followedCount: Int # only counts users with followStatus = FOLLOWING

  # Users the user follows that have stories
  #   - private to user themselves only
  #   - ordered by user-with-story-closest-to-expiring-first
  followedUsersWithStories(limit: Int, nextToken: String): PaginatedUsers

  # Users that follow the user
  #   - null for users with followCountsHidden set, or if user has blocked caller
  #   - followStatus cannot be set to NOT_FOLLOWING
  #   - followStatus can be set to values different from the default only when looking at our own user
  followerUsers(followStatus: FollowStatus = FOLLOWING, limit: Int, nextToken: String): PaginatedUsers
  followerCount: Int # only counts users with followStatus = FOLLOWING

  # Users the user has blocked
  #   - private to user themselves only
  #   - ordered by blockedAt, most recent first
  blockedUsers(limit: Int, nextToken: String): PaginatedUsers

  # User's albums
  #   - albums of a private user are private to only themselves and their followers
  #   - ordered with most recently created album first
  albums(limit: Int, nextToken: String): PaginatedAlbums
  albumCount: Int

  # Chats the user is in
  #   - private to the user themselves
  #   - ordered by Chat.lastMessageActivityAt, most recent first
  chats(limit: Int, nextToken: String): PaginatedChats
  chatCount: Int

  # Direct-message chat between caller and user. Null when looking at:
  #   - self
  #   - a user that has blocked caller or that caller has blocked
  #   - a user with whom caller has not exchanged direct messages
  directChat: Chat
}

type PaginatedUsers {
  items: [User!]!
  nextToken: String
}

type Chat {
  chatId: ID!
  chatType: ChatType!
  name: String
  createdAt: AWSDateTime!
  lastMessageActivityAt: AWSDateTime
  # Users: ordered by joinedAt, earliest first
  #   - excludeUserId will filter out any user with that userId from the results
  users(limit: Int, nextToken: String, excludeUserId: ID): PaginatedUsers!
  userCount: Int!
  # Messages: ordered by createdAt, earliest first by default
  messages(limit: Int, nextToken: String, reverse: Boolean): PaginatedChatMessages!
  messageCount: Int!
}

type PaginatedChats {
  items: [Chat!]!
  nextToken: String
}

type ChatMessage {
  messageId: ID!
  text: String!
  textTaggedUsers: [TextTaggedUser!]!  # max of 100
  createdAt: AWSDateTime!
  lastEditedAt: AWSDateTime
  chat: Chat!
  authorUserId: ID  # null if this is a system message (ex: 'user X left the chat')
  author: User  # null if either system message, or user deleted, or blocked/er by/of caller
  viewedStatus: ViewedStatus!  # has the caller viewed this message?
}

type PaginatedChatMessages {
  items: [ChatMessage!]!
  nextToken: String
}

type ChatMessageNotification {
  userId: ID!  # user this notification is intended for
  type: ChatMessageNotificationType!
  message: ChatMessage!
}

enum ChatMessageNotificationType {
  ADDED
  EDITED
  DELETED
}

input ChatMessageNotificationInput {
  userId: ID!  # user this notification is intended for
  type: ChatMessageNotificationType!
  messageId: ID!
  chatId: ID!
  text: String!
  textTaggedUserIds: [TextTaggedUserIdInput!]!
  createdAt: AWSDateTime!
  lastEditedAt: AWSDateTime
  authorUserId: ID  # null for system messages
  # Stringified JSON of the author's serialized representation
  #   - null for system messages or when caller has blocking relationship with author
  authorEncoded : String
}

enum PrivacyStatus {
  PUBLIC
  PRIVATE
}

enum ChatType {
  DIRECT
  GROUP
}

enum ViewedStatus {
  NOT_VIEWED
  NOT_VIEWED_SINCE_LAST_EDIT
  VIEWED
}

enum FollowStatus {
  NOT_FOLLOWING
  FOLLOWING
  SELF
  REQUESTED
  DENIED
}

enum BlockStatus {
  NOT_BLOCKING
  BLOCKING
  SELF
}

# DEPRECATED
enum MediaObjectType {
  IMAGE
}

enum PostStatus {
  PENDING
  PROCESSING
  COMPLETED
  ERROR
  ARCHIVED
  DELETING
}

enum PostType {
  TEXT_ONLY
  IMAGE
  VIDEO
}

enum LikeStatus {
  ONYMOUSLY_LIKED
  ANONYMOUSLY_LIKED
  NOT_LIKED
}

enum FlagStatus {
  FLAGGED
  NOT_FLAGGED
}

enum ImageFormat {
  HEIC
  JPEG
}

# DEPRECATED: use ImageInput
input MediaObjectUpload {
  mediaId: ID!
  mediaType: MediaObjectType = IMAGE
  takenInReal: Boolean
  originalFormat: String

  # There are two ways to upload image data:
  #   - by http PUTing image data to MediaObject.uploadUrl, after creating the post OR
  #   - by including image data here, as a base64-encoded string (intended for small images)
  imageData: String
}

input ImageInput {
  takenInReal: Boolean
  imageFormat: ImageFormat = JPEG
  originalFormat: String
  originalMetadata: String

  # There are two ways to upload image data:
  #   - by http PUTing image data to Post.imageUploadUrl, after creating the post OR
  #   - by including image data here, as a base64-encoded string (intended for small images)
  imageData: String
}

type Color {
  r: Int
  g: Int
  b: Int
}

type Image {
  url: AWSURL!
  url64p: AWSURL!
  url480p: AWSURL!
  url1080p: AWSURL!
  url4k: AWSURL!
  width: Int
  height: Int
  colors: [Color!]
}

type Video {
  urlMasterM3U8: AWSURL!
  accessCookies: CloudFrontAccessCookies!
}

# https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-setting-signed-cookie-custom-policy.html
type CloudFrontAccessCookies {
  domain: String!           # domain the cookies should be set on
  path: String!             # path the cookies should be set on
  expiresAt: AWSDateTime!   # when the cookie is good till
  policy: String!           # value of CloudFront-Policy cookie
  signature: String!        # value of CloudFront-Signature cookie
  keyPairId: String!        # value of CloudFront-Key-Pair-Id cookie
}

type Post {
  postId: ID!
  postedAt: AWSDateTime!
  postedBy: User!
  postType: PostType!
  postStatus: PostStatus!
  expiresAt: AWSDateTime  # null indicates no expiration
  text: String
  textTaggedUsers: [TextTaggedUser!]!  # max of 100
  album: Album
  flagStatus: FlagStatus!  # has the caller flagged this post?
  likeStatus: LikeStatus!  # has the caller liked this post?
  viewedStatus: ViewedStatus!  # has the caller viewed this post?
  likesDisabled: Boolean
  sharingDisabled: Boolean
  verificationHidden: Boolean
  isVerified: Boolean

  image: Image
  imageUploadUrl: AWSURL

  video: Video
  videoUploadUrl: AWSURL

  # The first post with the same image as this post
  #   - null if post has not yet reached COMPLETED stage
  #   - null if the caller does not have access to the original post
  #   - will be a copy of parent post if parent post is the first with this image
  originalPost: Post

  # Count of unique users who have viewed this post
  #   - null if user has viewCountsHidden set
  viewedByCount: Int

  # Unique users who have viewed this post
  #   - ordered by when post was first viewed at
  #   - visible only to owner of the post
  #   - null if user has viewCountsHidden set
  viewedBy(limit: Int, nextToken: String): PaginatedUsers

  # Users that have onymously liked this post
  #   - ordered with first like first
  #   - like lists and counts are private to the post owner themselves
  #   - onymous means non-anonymous
  onymouslyLikedBy(limit: Int, nextToken: String): PaginatedUsers
  onymousLikeCount: Int
  anonymousLikeCount: Int

  # Comments on the post
  #   - null if comments are disabled
  #   - ordered by commentedAt, oldest comment first
  comments(limit: Int, nextToken: String, reverse: Boolean): PaginatedComments
  commentCount: Int
  commentsDisabled: Boolean

  # Have new comments appeared on the post since the last time a view of a comment was reported?
  #   - private to post owner only
  hasNewCommentActivity: Boolean
}

type PaginatedPosts {
  items: [Post!]!
  nextToken: String
}

type PostNotification {
  userId: ID!  # user this notification is intended for
  type: PostNotificationType!
  post: Post!
}

enum PostNotificationType {
  COMPLETED
}

input PostNotificationInput {
  userId: ID!  # user this notification is intended for
  type: PostNotificationType!
  postId: ID!
  postStatus: PostStatus!
  isVerified: Boolean
}

type TextTaggedUser {
  tag: String!  # ex: '@ian'
  user: User!
}

input TextTaggedUserIdInput {
  tag: String!  # ex: '@ian'
  userId: ID!
}

type Comment {
  commentId: ID!
  commentedAt: AWSDateTime!
  commentedBy: User!
  text: String!
  textTaggedUsers: [TextTaggedUser!]!  # max of 100
  viewedStatus: ViewedStatus!  # has the caller viewed this comment?
}

type PaginatedComments {
  items: [Comment!]!
  nextToken: String
}

type Album {
  albumId: ID!
  createdAt: AWSDateTime!
  ownedBy: User!
  name: String!
  description: String
  art: Image!

  # Posts in the album
  #   - posts with status COMPLETED only
  #   - ordered by postedAt, most recent post first
  posts(limit: Int, nextToken: String): PaginatedPosts!
  postCount: Int!
  postsLastUpdatedAt: AWSDateTime
}

type PaginatedAlbums {
  items: [Album!]!
  nextToken: String
}
