# Welcome to Serverless!
#
# For full config options, check the docs:
#    docs.serverless.com

service: real-main
frameworkVersion: '>=1.0.0 <2.0.0'

provider:
  name: aws
  stackName: real-${self:provider.stage}-main
  stage: ${opt:stage, 'dev'}
  runtime: python3.8
  logRetentionInDays: 7
  timeout: 30

  environment:
    # AWS_REGION is supplied by default by lambda
    AWS_ACCOUNT_ID: '#{AWS::AccountId}'

    # using cloud formation as a buffer here to avoid resource dependency loops. Deploy twice to get correct values.
    COGNITO_USER_POOL_ID: ${cf:${self:provider.stackName}.CognitoUserPoolId, 'placeholder'}
    COGNITO_BACKEND_USER_POOL_CLIENT_ID: ${cf:${self:provider.stackName}.CognitoBackendUserPoolClientId, 'placeholder'}
    COGNITO_TESTING_USER_POOL_CLIENT_ID: ${cf:${self:provider.stackName}.CognitoTestingUserPoolClientId, 'placeholder'}

    APPSYNC_GRAPHQL_URL: '#{GraphQlApi.GraphQLUrl}'
    DYNAMODB_TABLE: ${self:provider.stackName}
    UPLOADS_BUCKET: ${self:provider.stackName}-uploadsbucket-#{AWS::AccountId}  # naming to avoid resource dependency loops
    PLACEHOLDER_PHOTOS_BUCKET: real-production-themes-#{AWS::AccountId}  # real-themes doesn't use different stages
    PLACEHOLDER_PHOTOS_DIRECTORY: 'placeholder-photos'
    FRONTEND_RESOURCES_DOMAIN: ${cf:real-production-themes.CloudFrontThemesDomainName, 'placeholder'}
    CLOUDFRONT_DOMAIN: ${cf:real-${self:provider.stage}-cloudfront.CloudFrontUploadsDomainName, 'placeholder'}
    SECRETSMANAGER_CLOUDFRONT_KEY_PAIR_NAME: CloudFrontKeyPair-1  # choosen manually when creating a key pair in the console
    SECRETSMANAGER_POST_VERIFICATION_API_CREDS_NAME: PostVerificationAPICreds-${self:provider.stage}-1
    ES_SEARCH_DOMAIN: !GetAtt ElasticSearchDomain.DomainEndpoint
    MEDIACONVERT_ROLE_ARN: !GetAtt MediaCovertRole.Arn

    # avoid alerts when running integration test suite in dev env
    FLAGGED_ALERT_THRESHOLD: ${self:custom.envvars.FLAGGED_ALERT_THRESHOLD.${self:provider.stage}, '3'}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:*
      Resource: arn:aws:cognito-idp:*:*:*
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - !GetAtt DynamoDbTable.Arn
        - !Join [ /, [ !GetAtt DynamoDbTable.Arn, index, '*' ] ]
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: arn:aws:secretsmanager:*:*:*
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - !Join [ '', [ 'arn:aws:s3:::', '${self:provider.environment.UPLOADS_BUCKET}' ] ]  # needed for 404's to work (via s3:ListBucket)
        - !Join [ '', [ 'arn:aws:s3:::', '${self:provider.environment.UPLOADS_BUCKET}', '/*' ] ]
    - Effect: Allow
      Action:
        - es:ESHttp*
      Resource: !Join [ '', [ !GetAtt ElasticSearchDomain.DomainArn, '/*' ] ]
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource: !Join [ '', [ 'arn:aws:s3:::', '${self:provider.environment.PLACEHOLDER_PHOTOS_BUCKET}' ] ]
    - Effect: Allow
      Action:
        - mediaconvert:CreateJob
        - mediaconvert:DescribeEndpoints
      Resource: arn:aws:mediaconvert:*:*:*
    - Effect: Allow
      Action:
        - iam:GetRole
        - iam:PassRole
      Resource: !GetAtt MediaCovertRole.Arn
    - Effect: Allow
      Action:
        - appsync:GraphQL
      Resource: '#{GraphQlApi.Arn}/types/Mutation/fields/trigger*'

custom:
  envvars:
    FLAGGED_ALERT_THRESHOLD:
      production: 1

  splitStacks:
    perType: false

  appSync:
    name: ${self:service}-${self:provider.stage}
    authenticationType: AWS_IAM
    logConfig:
      level: ERROR
    substitutions:
      table: ${self:provider.environment.DYNAMODB_TABLE}
      frontendResourcesDomain: ${self:provider.environment.FRONTEND_RESOURCES_DOMAIN}
      lambdaRoleId: '#{IamRoleLambdaExecution.RoleId}'

    mappingTemplates:

      - type: Query
        field: self
        request: Query.self/before.request.vtl
        response: Query.self/after.response.vtl
        kind: PIPELINE
        functions:
          - Users.batchGet

      - type: Query
        field: user
        request: Query.user/before.request.vtl
        response: Query.user/after.response.vtl
        kind: PIPELINE
        functions:
          - Users.batchGet
          - Users.batchGet.blockerStatus
          - Users.batchGet.followedStatus

      - type: Query
        field: searchUsers
        dataSource: ElasticSearchDataSource

      - type: Query
        field: trendingUsers
        dataSource: DynamodbDataSource

      - type: User
        field: photo
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: User
        field: followerStatus
        dataSource: DynamodbDataSource

      - type: User
        field: followCountsHidden
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: User
        field: followedCount
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: User
        field: followerCount
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: User
        field: followedUsers
        dataSource: DynamodbDataSource

      - type: User
        field: followedUsersWithStories
        dataSource: DynamodbDataSource

      - type: User
        field: followerUsers
        dataSource: DynamodbDataSource

      - type: User
        field: postCount
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: User
        field: languageCode
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: User
        field: themeCode
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: User
        field: bio
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: User
        field: email
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: User
        field: phoneNumber
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: User
        field: acceptedEULAVersion
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: User
        field: commentsDisabled
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: User
        field: likesDisabled
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: User
        field: sharingDisabled
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: User
        field: verificationHidden
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: User
        field: blockedStatus
        dataSource: DynamodbDataSource

      - type: User
        field: viewCountsHidden
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: User
        field: postHasNewCommentActivity
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: User
        field: feed
        dataSource: DynamodbDataSource

      - type: User
        field: stories
        dataSource: DynamodbDataSource

      - type: User
        field: posts
        dataSource: DynamodbDataSource

      - type: User
        field: postViewedByCount
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: User
        field: onymouslyLikedPosts
        dataSource: DynamodbDataSource
        request: User.likedPosts.request.vtl
        response: User.likedPosts.response.vtl

      - type: User
        field: anonymouslyLikedPosts
        dataSource: DynamodbDataSource
        request: User.likedPosts.request.vtl
        response: User.likedPosts.response.vtl

      - type: User
        field: blockedUsers
        dataSource: DynamodbDataSource

      - type: User
        field: albumCount
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: User
        field: albums
        dataSource: DynamodbDataSource

      - type: User
        field: chatCount
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: User
        field: chats
        dataSource: DynamodbDataSource

      - type: User
        field: directChat
        dataSource: DynamodbDataSource

      - type: Chat
        field: users
        dataSource: DynamodbDataSource

      - type: Chat
        field: userCount
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: Chat
        field: messages
        dataSource: DynamodbDataSource
        response: PassThru.response.vtl

      - type: Chat
        field: messageCount
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: ChatMessage
        field: authorUserId
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: ChatMessage
        field: chat
        request: ChatMessage.chat/before.request.vtl
        response: ChatMessage.chat/after.response.vtl
        kind: PIPELINE
        functions:
          - Chats.batchGet

      - type: ChatMessage
        field: textTaggedUsers
        request: Source.textTaggedUsers/before.request.vtl
        response: Source.textTaggedUsers/after.response.vtl
        kind: PIPELINE
        functions:
          - Users.batchGet
          - Users.batchGet.blockerStatus
          - Users.filterBy.blockerStatus
          - Users.batchGet.followedStatus

      - type: ChatMessage
        field: viewedStatus
        dataSource: DynamodbDataSource

      - type: Mutation
        field: createCognitoOnlyUser
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: createFacebookUser
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: createGoogleUser
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: startChangeUserEmail
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: finishChangeUserEmail
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: startChangeUserPhoneNumber
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: finishChangeUserPhoneNumber
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: resetUser
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: setUserDetails
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: setUserAcceptedEULAVersion
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: followUser
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: unfollowUser
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: acceptFollowerUser
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: denyFollowerUser
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: blockUser
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: unblockUser
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: onymouslyLikePost
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: anonymouslyLikePost
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: dislikePost
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: addComment
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: deleteComment
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: reportCommentViews
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: addAlbum
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: editAlbum
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: deleteAlbum
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Post
        field: flagStatus
        dataSource: DynamodbDataSource

      - type: Post
        field: likeStatus
        dataSource: DynamodbDataSource

      - type: Post
        field: viewedStatus
        dataSource: DynamodbDataSource

      - type: Post
        field: originalPost
        request: Post.originalPost/before.request.vtl
        response: Post.originalPost/after.response.vtl
        kind: PIPELINE
        functions:
          - Posts.batchGet
          - Posts.filterBy.postStatus
          - Users.beginPipeline
          - Users.batchGet
          - Users.batchGet.blockerStatus
          - Users.filterBy.blockerStatus
          - Users.batchGet.followedStatus
          - Users.filterBy.followedStatus
          - Users.endPipeline

      - type: Post
        field: viewedByCount
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: Post
        field: viewedBy
        dataSource: DynamodbDataSource

      - type: Post
        field: commentsDisabled
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: Post
        field: likesDisabled
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: Post
        field: sharingDisabled
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: Post
        field: verificationHidden
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: Post
        field: onymousLikeCount
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: Post
        field: anonymousLikeCount
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: Post
        field: onymouslyLikedBy
        dataSource: DynamodbDataSource

      - type: Post
        field: textTaggedUsers
        request: Source.textTaggedUsers/before.request.vtl
        response: Source.textTaggedUsers/after.response.vtl
        kind: PIPELINE
        functions:
          - Users.batchGet
          - Users.batchGet.blockerStatus
          - Users.filterBy.blockerStatus
          - Users.batchGet.followedStatus

      - type: Post
        field: commentCount
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: Post
        field: comments
        dataSource: DynamodbDataSource
        response: PassThru.response.vtl

      - type: Post
        field: album
        dataSource: DynamodbDataSource

      - type: Post
        field: image
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Post
        field: imageUploadUrl
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Post
        field: video
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Post
        field: videoUploadUrl
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Post
        field: isVerified
        dataSource: DynamodbDataSource

      - type: Post
        field: hasNewCommentActivity
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: Album
        field: art
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Album
        field: postCount
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: Album
        field: posts
        dataSource: DynamodbDataSource

      - type: Comment
        field: textTaggedUsers
        request: Source.textTaggedUsers/before.request.vtl
        response: Source.textTaggedUsers/after.response.vtl
        kind: PIPELINE
        functions:
          - Users.batchGet
          - Users.batchGet.blockerStatus
          - Users.filterBy.blockerStatus
          - Users.batchGet.followedStatus

      - type: Comment
        field: viewedStatus
        dataSource: DynamodbDataSource

      - type: Query
        field: post
        request: Query.post/before.request.vtl
        response: Query.post/after.response.vtl
        kind: PIPELINE
        functions:
          - Posts.batchGet
          - Posts.filterBy.postStatus
          - Users.beginPipeline
          - Users.batchGet
          - Users.batchGet.blockerStatus
          - Users.filterBy.blockerStatus
          - Users.batchGet.followedStatus
          - Users.filterBy.followedStatus
          - Users.endPipeline

      - type: Query
        field: trendingPosts
        dataSource: DynamodbDataSource

      - type: Query
        field: album
        request: Query.album/before.request.vtl
        response: Query.album/after.response.vtl
        kind: PIPELINE
        functions:
          - Albums.batchGet
          - Users.beginPipeline
          - Users.batchGet
          - Users.batchGet.blockerStatus
          - Users.filterBy.blockerStatus
          - Users.batchGet.followedStatus
          - Users.filterBy.followedStatus
          - Users.endPipeline

      - type: Query
        field: chat
        request: Query.chat/before.request.vtl
        response: Query.chat/after.response.vtl
        kind: PIPELINE
        functions:
          - ChatMemberships.batchGet
          - Query.chat.transform
          - Chats.batchGet

      - type: Mutation
        field: addPost
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: editPost
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: editPostAlbum
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: editPostAlbumOrder
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: editPostExpiresAt
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: flagPost
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: deletePost
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: archivePost
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: restoreArchivedPost
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: reportPostViews
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: createDirectChat
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: createGroupChat
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: editGroupChat
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: addToGroupChat
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: leaveGroupChat
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: addChatMessage
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: editChatMessage
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: deleteChatMessage
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: reportChatMessageViews
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: lambdaClientError
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: lambdaServerError
        dataSource: LambdaDataSource
        request: Lambda.request.vtl
        response: Lambda.response.vtl

      - type: Mutation
        field: dynamoServerError
        dataSource: DynamodbDataSource
        response: PassThru.response.vtl

      - type: PaginatedChats
        field: items
        request: PaginatedChats.items/before.request.vtl
        response: PassThru.response.vtl
        kind: PIPELINE
        functions:
          - Chats.batchGet

      - type: PaginatedChatMessages
        field: items
        request: PaginatedChatMessages.items/before.request.vtl
        response: PassThru.response.vtl
        kind: PIPELINE
        functions:
          - ChatMessages.batchGet
          - PaginatedChatMessages.items.beginUserPipeline
          - Users.batchGet
          - Users.batchGet.blockerStatus
          - Users.filterBy.blockerStatus
          - Users.batchGet.followedStatus
          - PaginatedChatMessages.items.endUserPipeline

      - type: PaginatedComments
        field: items
        request: PaginatedComments.items/before.request.vtl
        response: PassThru.response.vtl
        kind: PIPELINE
        functions:
          - Comments.batchGet
          - Users.beginPipeline
          - Users.batchGet
          - Users.batchGet.blockerStatus
          - Users.filterBy.blockerStatus
          - Users.batchGet.followedStatus
          - Users.filterBy.followedStatus
          - Users.endPipeline

      - type: PaginatedPosts
        field: items
        request: PaginatedPosts.items/before.request.vtl
        response: PassThru.response.vtl
        kind: PIPELINE
        functions:
          - Posts.batchGet
          - Posts.filterBy.postStatus
          - Users.beginPipeline
          - Users.batchGet
          - Users.batchGet.blockerStatus
          - Users.filterBy.blockerStatus
          - Users.batchGet.followedStatus
          - Users.filterBy.followedStatus
          - Users.endPipeline

      - type: PaginatedUsers
        field: items
        request: PaginatedUsers.items/before.request.vtl
        response: PassThru.response.vtl
        kind: PIPELINE
        functions:
          - Users.batchGet
          - Users.batchGet.blockerStatus
          - Users.filterBy.blockerStatus
          - Users.batchGet.followedStatus

      - type: Mutation
        field: triggerChatMessageNotification
        dataSource: NoneDataSource
        response: PassThru.response.vtl

      - type: Subscription
        field: onChatMessageNotification
        dataSource: DynamodbDataSource

    functionConfigurations:

      - dataSource: DynamodbDataSource
        name: Users.batchGet

      - dataSource: DynamodbDataSource
        name: Users.batchGet.blockerStatus

      - dataSource: NoneDataSource
        name: Users.filterBy.blockerStatus
        response: PassThru.response.vtl

      - dataSource: DynamodbDataSource
        name: Users.batchGet.followedStatus

      - dataSource: NoneDataSource
        name: Users.filterBy.followedStatus
        response: PassThru.response.vtl

      - dataSource: NoneDataSource
        name: Users.beginPipeline
        response: PassThru.response.vtl

      - dataSource: NoneDataSource
        name: Users.endPipeline
        response: PassThru.response.vtl

      - dataSource: DynamodbDataSource
        name: Posts.batchGet

      - dataSource: NoneDataSource
        name: Posts.filterBy.postStatus
        response: PassThru.response.vtl

      - dataSource: DynamodbDataSource
        name: Albums.batchGet

      - dataSource: DynamodbDataSource
        name: Comments.batchGet

      - dataSource: DynamodbDataSource
        name: Chats.batchGet

      - dataSource: DynamodbDataSource
        name: ChatMemberships.batchGet

      - dataSource: DynamodbDataSource
        name: ChatMessages.batchGet

      - dataSource: NoneDataSource
        name: Query.chat.transform
        request: Query.chat/transform.request.vtl
        response: PassThru.response.vtl

      - dataSource: NoneDataSource
        name: PaginatedChatMessages.items.beginUserPipeline
        request: PaginatedChatMessages.items/beginUserPipeline.request.vtl
        response: PassThru.response.vtl

      - dataSource: NoneDataSource
        name: PaginatedChatMessages.items.endUserPipeline
        request: PaginatedChatMessages.items/endUserPipeline.request.vtl
        response: PassThru.response.vtl

    dataSources:

      - type: NONE
        name: NoneDataSource

      - type: AMAZON_DYNAMODB
        name: DynamodbDataSource
        config:
          tableName: ${self:provider.environment.DYNAMODB_TABLE}

      - type: AWS_LAMBDA
        name: LambdaDataSource
        config:
          functionName: appSyncDispatch

      - type: AMAZON_ELASTICSEARCH
        name: ElasticSearchDataSource
        config:
          endpoint: !Join [ '', [ 'https://', !GetAtt ElasticSearchDomain.DomainEndpoint ] ]
          # the custom iamRoleStatements stanza is actually necessary because of a bug
          # https://github.com/sid88in/serverless-appsync-plugin/issues/233#issuecomment-602923390
          iamRoleStatements:
            - Effect: Allow
              Action:
                - es:ESHttpGet
              Resource: !Join [ '', [ !GetAtt ElasticSearchDomain.Arn, '/*' ] ]

  # https://github.com/ACloudGuru/serverless-plugin-aws-alerts
  alerts:
    stages:
      - production
      - staging
      - dev  # for now
    dashboards: true
    topics:
      alarm:
        topic: ${self:service}-${self:provider.stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: mike+${self:provider.stage}-#{AWS::AccountId}@real.app
    definitions:
      functionFlagged:
        metric: postsFlagged
        threshold: 1
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        treatMissingData: missing
        pattern: 'FLAGGED'
      functionCognitoServerErrors:
        metric: cognitoServerErrors
        threshold: 1
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        treatMissingData: missing
        pattern: 'ERROR - CognitoClientException'

resources:

  # https://serverless-stack.com/chapters/configure-cognito-user-pool-in-serverless.html
  Resources:

    # Keeping schema generic to allow for future fleibility
    # Follows design patterns explained here: https://www.youtube.com/watch?v=HaEPXoXVf2k
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions:
          - AttributeName: partitionKey
            AttributeType: S
          - AttributeName: sortKey
            AttributeType: S
          - AttributeName: gsiA1PartitionKey
            AttributeType: S
          - AttributeName: gsiA1SortKey
            AttributeType: S
          - AttributeName: gsiA2PartitionKey
            AttributeType: S
          - AttributeName: gsiA2SortKey
            AttributeType: S
          - AttributeName: gsiA3PartitionKey
            AttributeType: S
          - AttributeName: gsiA3SortKey
            AttributeType: S
          - AttributeName: gsiK1PartitionKey
            AttributeType: S
          - AttributeName: gsiK1SortKey
            AttributeType: S
          - AttributeName: gsiK2PartitionKey
            AttributeType: S
          - AttributeName: gsiK2SortKey
            AttributeType: S
          - AttributeName: gsiK3PartitionKey
            AttributeType: S
          - AttributeName: gsiK3SortKey
            AttributeType: N
        KeySchema:
          - AttributeName: partitionKey
            KeyType: HASH
          - AttributeName: sortKey
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI-A1
            KeySchema:
            - AttributeName: gsiA1PartitionKey
              KeyType: HASH
            - AttributeName: gsiA1SortKey
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: GSI-A2
            KeySchema:
            - AttributeName: gsiA2PartitionKey
              KeyType: HASH
            - AttributeName: gsiA2SortKey
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: GSI-A3
            KeySchema:
            - AttributeName: gsiA3PartitionKey
              KeyType: HASH
            - AttributeName: gsiA3SortKey
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: GSI-K1
            KeySchema:
            - AttributeName: gsiK1PartitionKey
              KeyType: HASH
            - AttributeName: gsiK1SortKey
              KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY
          - IndexName: GSI-K2
            KeySchema:
            - AttributeName: gsiK2PartitionKey
              KeyType: HASH
            - AttributeName: gsiK2SortKey
              KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY
          - IndexName: GSI-K3
            KeySchema:
            - AttributeName: gsiK3PartitionKey
              KeyType: HASH
            - AttributeName: gsiK3SortKey
              KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY

    ElasticSearchDomain:
      Type: AWS::Elasticsearch::Domain
      Properties:
        DomainName: ${self:provider.stackName}
        EBSOptions:
          EBSEnabled: true
          VolumeType: gp2
          VolumeSize: 10
        ElasticsearchClusterConfig:
          InstanceType: t2.small.elasticsearch
          InstanceCount: 2
          DedicatedMasterEnabled: false
          ZoneAwarenessEnabled: false
        ElasticsearchVersion: 7.1

    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      DeletionPolicy: Retain
      Properties:
        IdentityPoolName: RealIdentityPool_${self:provider.stage}  # AWS validation doesn't allow dashes in this string
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoTestingUserPoolClient
            ProviderName: !GetAtt CognitoUserPool.ProviderName
            ServerSideTokenCheck: true
          - ClientId:
              Ref: CognitoFrontendUserPoolClient
            ProviderName: !GetAtt CognitoUserPool.ProviderName
            ServerSideTokenCheck: true
          - ClientId:
              Ref: CognitoBackendUserPoolClient
            ProviderName: !GetAtt CognitoUserPool.ProviderName
            ServerSideTokenCheck: true
        # Google should be set up as an OIDC provider before deploying
        # https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc.html
        # https://medium.com/fullstack-with-react-native-aws-serverless-and/set-up-openid-connect-oidc-provider-in-aws-91d498f3c9f7
        OpenIdConnectProviderARNs:
          - 'arn:aws:iam::#{AWS::AccountId}:oidc-provider/accounts.google.com'
        SupportedLoginProviders:
          graph.facebook.com: '864583797262307'

    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated: !GetAtt CognitoIdentityPoolAuthRole.Arn
          unauthenticated: !GetAtt CognitoIdentityPoolUnauthenticatedAuthRole.Arn

    # IAM role used for authenticated users
    # https://serverless-stack.com/chapters/configure-cognito-identity-pool-in-serverless.html
    # https://github.com/sid88in/serverless-appsync-plugin/issues/70#issuecomment-384055728
    CognitoIdentityPoolAuthRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action:
                - sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  cognito-identity.amazonaws.com:aud:
                    Ref: CognitoIdentityPool
        Policies:
          - PolicyName: CognitoIdentityPoolAuthenticatedPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - appsync:GraphQL
                  Resource:
                    # 'GraphQlApi' name comes from https://github.com/sid88in/serverless-appsync-plugin/blob/1.1.1/index.js#L11
                    - !Join [ /, [ 'arn:aws:appsync:#{AWS::Region}:#{AWS::AccountId}:apis', !GetAtt GraphQlApi.ApiId, '*' ] ]

    # Empty IAM role used for unauthenticated users
    CognitoIdentityPoolUnauthenticatedAuthRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action:
                - sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  cognito-identity.amazonaws.com:aud:
                    Ref: CognitoIdentityPool

    # IAM role for Cognito to send SMS's
    CognitoSNSRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - cognito-idp.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: CognitoSNSPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: sns:publish
                  Resource: '*'

    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      DeletionPolicy: Retain
      Properties:
        UserPoolName: RealUserPool-${self:provider.stage}
        AliasAttributes:
          - email
          - phone_number
          - preferred_username
        AutoVerifiedAttributes:
          - email
          - phone_number
        EmailConfiguration:
          EmailSendingAccount: DEVELOPER
          SourceArn: arn:aws:ses:us-east-1:#{AWS::AccountId}:identity/no-reply@real.app
        SmsConfiguration:
          SnsCallerArn: !GetAtt CognitoSNSRole.Arn
        Schema:
          - Name: unverified_email
            AttributeDataType: String
            Mutable: true
          - Name: unverified_phone
            AttributeDataType: String
            Mutable: true

    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolclient.html
    CognitoBackendUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: RealBackendUserPoolClient-${self:provider.stage}
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false

    CognitoTestingUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: RealTestingUserPoolClient-${self:provider.stage}
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - USER_PASSWORD_AUTH
        GenerateSecret: false
        SupportedIdentityProviders:
          - COGNITO
        CallbackURLs:
          - real.app://oauth-callback
        LogoutURLs:
          - real.app://oauth-signout
        AllowedOAuthFlows:
          - code
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - aws.cognito.signin.user.admin
          - email
          - openid
          - phone
          - profile
        ReadAttributes:
          - email
          - phone_number
          - family_name
          - email_verified
          - phone_number_verified
        WriteAttributes:
          - email
          - phone_number
          - family_name
        AnalyticsConfiguration:
          ApplicationId: !Ref PinpointApp
          ExternalId: 'real-cognito-to-pinpoint-client-#{AWS::AccountId}-${self:provider.stage}'
          RoleArn: !GetAtt CognitoToPinpointRole.Arn
          UserDataShared: true

    CognitoFrontendUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: RealFrontendUserPoolClient-${self:provider.stage}
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - USER_PASSWORD_AUTH
        GenerateSecret: false
        SupportedIdentityProviders:
          - COGNITO
        CallbackURLs:
          - real.app://oauth-callback
        LogoutURLs:
          - real.app://oauth-signout
        AllowedOAuthFlows:
          - code
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - aws.cognito.signin.user.admin
          - email
          - openid
          - phone
          - profile
        ReadAttributes:
          - email
          - phone_number
        WriteAttributes:
          - email
          - phone_number
        AnalyticsConfiguration:
          ApplicationId: !Ref PinpointApp
          ExternalId: 'real-cognito-to-pinpoint-client-#{AWS::AccountId}-${self:provider.stage}'
          RoleArn: !GetAtt CognitoToPinpointRole.Arn
          UserDataShared: true

    PinpointApp:
      Type: AWS::Pinpoint::App
      Properties:
        Name: REAL-${self:provider.stage}

    CognitoToPinpointRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - cognito-idp.amazonaws.com
              Action:
                - sts:AssumeRole
        # copied from an auto-generated role using AWS console
        Policies:
          - PolicyName: CognitoToPinpointPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: mobiletargeting:UpdateEndpoint
                  Resource: !Join [ /, [ !GetAtt PinpointApp.Arn, 'endpoints', '*' ] ]
                - Effect: Allow
                  Action: mobileanalytics:PutItems
                  Resource: '*'

    # IAM role for MediaConvert to use to transcode video
    MediaCovertRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - mediaconvert.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          # full S3 and api gateway access are required to run media convert
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
          - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess

    S3BucketUploads:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: ${self:provider.environment.UPLOADS_BUCKET}
        AccessControl: Private
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256

    S3UploadsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:provider.environment.UPLOADS_BUCKET}
        PolicyDocument:
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Resource: !Join [ /, [ !GetAtt S3BucketUploads.Arn, '*' ] ]
              Principal:
                CanonicalUser: ${cf:real-${self:provider.stage}-cloudfront.CloudFrontUploadsS3CanonicalUserId}
            - Action:
                - 's3:PutObject'
              Effect: Allow
              Resource: !Join [ /, [ !GetAtt S3BucketUploads.Arn, '*' ] ]
              Principal:
                CanonicalUser: ${cf:real-${self:provider.stage}-cloudfront.CloudFrontUploadsS3CanonicalUserId}
              Condition:
                StringEquals:
                  s3:x-amz-acl: bucket-owner-full-control

    S3ImagePostUploadedLambdaPermissionUploadsS3:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt S3ImagePostUploadedLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: s3.amazonaws.com
        SourceAccount: '#{AWS::AccountId}'
        SourceArn: 'arn:aws:s3:::${self:provider.environment.UPLOADS_BUCKET}'

    S3VideoPostUploadedLambdaPermissionUploadsS3:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt S3VideoPostUploadedLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: s3.amazonaws.com
        SourceAccount: '#{AWS::AccountId}'
        SourceArn: 'arn:aws:s3:::${self:provider.environment.UPLOADS_BUCKET}'

    S3VideoPostProcessedLambdaPermissionUploadsS3:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt S3VideoPostProcessedLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: s3.amazonaws.com
        SourceAccount: '#{AWS::AccountId}'
        SourceArn: 'arn:aws:s3:::${self:provider.environment.UPLOADS_BUCKET}'

    # Based off the cloudformation template output of serverless-plugin-aws-alerts
    AppSyncServerErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        Namespace: ${self:provider.stackName}
        MetricName: AppSyncServerErrors
        Threshold: 1
        Period: 60
        EvaluationPeriods: 1
        DatapointsToAlarm: 1
        ComparisonOperator: GreaterThanOrEqualToThreshold
        AlarmActions:
          - Ref: AwsAlertsAlarm
        TreatMissingData: missing
        Statistic: Sum

    AppSyncServerErrorLogMetricFilterALERT:
      Type: AWS::Logs::MetricFilter
      Properties:
        FilterPattern: '{ $.fieldInError IS TRUE && $.errors[0] != "* errorType=ClientError, *" }'
        LogGroupName: !Join [ /, [ /aws/appsync/apis, !GetAtt GraphQlApi.ApiId ] ]
        MetricTransformations:
          - MetricValue: 1
            MetricNamespace: ${self:provider.stackName}
            MetricName: AppSyncServerErrors

    AppSyncServerErrorLogMetricFilterOK:
      Type: AWS::Logs::MetricFilter
      Properties:
        FilterPattern: ''
        LogGroupName: !Join [ /, [ /aws/appsync/apis, !GetAtt GraphQlApi.ApiId ] ]
        MetricTransformations:
          - MetricValue: 0
            MetricNamespace: ${self:provider.stackName}
            MetricName: AppSyncServerErrors

    FrontendLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /frontend/real-${self:provider.stage}-frontend
        RetentionInDays: 7

    FrontendLogger:
      Type: AWS::IAM::User
      Properties:
        UserName: real-${self:provider.stage}-frontend-logger
        Policies:
          - PolicyName: real-${self:provider.stage}-frontend-logger-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:DescribeLogStreams
                    - logs:CreateLogStream
                  Resource:
                    - !GetAtt FrontendLogGroup.Arn
                - Effect: Allow
                  Action:
                    - logs:PutLogEvents
                  Resource:
                    - !Join [ /, [ !GetAtt FrontendLogGroup.Arn, '*' ] ]

    FrontendLoggerAccessKey:
      Type: AWS::IAM::AccessKey
      Properties:
        UserName:
          Ref: FrontendLogger

  Outputs:

    CognitoUserPoolId:
      Value:
        Ref: CognitoUserPool

    CognitoBackendUserPoolClientId:
      Value:
        Ref: CognitoBackendUserPoolClient

    CognitoTestingUserPoolClientId:
      Value:
        Ref: CognitoTestingUserPoolClient

    CognitoFrontendUserPoolClientId:
      Value:
        Ref: CognitoFrontendUserPoolClient

    CognitoIdentityPoolId:
      Value:
        Ref: CognitoIdentityPool

    ElasticSearchEndpoint:
      Value: !GetAtt ElasticSearchDomain.DomainEndpoint

    FrontendLoggerAccessKeyId:
      Value:
        Ref: FrontendLoggerAccessKey

    FrontendLoggerSecretAccessKey:
      Value: !GetAtt FrontendLoggerAccessKey.SecretAccessKey

    GitBranch:
      Value: ${git:branch}

    GitDescribe:
      Value: ${git:describeLight}

    GitIsDirty:
      Value: ${git:isDirty}

    MediaConvertRoleArn:
      Value: !GetAtt MediaCovertRole.Arn

    PinpointApplicationId:
      Value: !Ref PinpointApp

    UploadsBucketName:
      Value: ${self:provider.environment.UPLOADS_BUCKET}

    UploadsBucketDomainName:
      Value: !GetAtt S3BucketUploads.DomainName

functions:

  appSyncDispatch:
    name: ${self:provider.stackName}-appSyncDispatch
    handler: app.handlers.appsync.dispatch
    timeout: 10
    layers:
      - ${cf:real-${self:provider.stage}-lambda-layers.PythonRequirementsLambdaLayer}
    alarms:
      - functionFlagged
      - functionErrors
      - functionThrottles

  s3ImagePostUploaded:
    name: ${self:provider.stackName}-s3ImagePostUploaded
    handler: app.handlers.s3.image_post_uploaded
    layers:
      - ${cf:real-${self:provider.stage}-lambda-layers.PythonRequirementsLambdaLayer}
    events:
      - s3:
          bucket: uploads  # translated to 'S3BucketUploads' by serverless
          event: s3:ObjectCreated:Put
          rules:
            - suffix: /native.jpg
    alarms:
      - functionErrors
      - functionThrottles

  s3VideoPostUploaded:
    name: ${self:provider.stackName}-s3VideoPostUploaded
    handler: app.handlers.s3.video_post_uploaded
    layers:
      - ${cf:real-${self:provider.stage}-lambda-layers.PythonRequirementsLambdaLayer}
    events:
      - s3:
          bucket: uploads  # translated to 'S3BucketUploads' by serverless
          event: s3:ObjectCreated:Put
          rules:
            - suffix: /video-original.mov
    alarms:
      - functionErrors
      - functionThrottles

  s3VideoPostProcessed:
    name: ${self:provider.stackName}-s3VideoPostProcessed
    handler: app.handlers.s3.video_post_processed
    layers:
      - ${cf:real-${self:provider.stage}-lambda-layers.PythonRequirementsLambdaLayer}
    events:
      - s3:
          bucket: uploads  # translated to 'S3BucketUploads' by serverless
          event: s3:ObjectCreated:Put
          rules:
            - suffix: /video-hls/video.m3u8
    alarms:
      - functionErrors
      - functionThrottles

  reindexTrendingUsers:
    name: ${self:provider.stackName}-reindexTrendingUsers
    handler: app.handlers.cron.reindex_trending_users
    layers:
      - ${cf:real-${self:provider.stage}-lambda-layers.PythonRequirementsLambdaLayer}
    events:
      - schedule: rate(1 minute)
    alarms:
      - functionErrors
      - functionThrottles

  reindexTrendingPosts:
    name: ${self:provider.stackName}-reindexTrendingPosts
    handler: app.handlers.cron.reindex_trending_posts
    layers:
      - ${cf:real-${self:provider.stage}-lambda-layers.PythonRequirementsLambdaLayer}
    events:
      - schedule: rate(1 minute)
    alarms:
      - functionErrors
      - functionThrottles

  deleteRecentlyExpiredPosts:
    name: ${self:provider.stackName}-deleteRecentlyExpiredPosts
    handler: app.handlers.cron.delete_recently_expired_posts
    layers:
      - ${cf:real-${self:provider.stage}-lambda-layers.PythonRequirementsLambdaLayer}
    events:
      - schedule: rate(1 minute)
    alarms:
      - functionErrors
      - functionThrottles

  deleteOlderExpiredPosts:
    name: ${self:provider.stackName}-deleteOlderExpiredPosts
    handler: app.handlers.cron.delete_older_expired_posts
    layers:
      - ${cf:real-${self:provider.stage}-lambda-layers.PythonRequirementsLambdaLayer}
    events:
      - schedule: rate(1 day)
    alarms:
      - functionErrors
      - functionThrottles

  deleteUnconfirmedExpiredUsers:
    name: ${self:provider.stackName}-deleteUnconfirmedExpiredUsers
    handler: app.handlers.cron.delete_unconfirmed_expired_users_in_cognito
    layers:
      - ${cf:real-${self:provider.stage}-lambda-layers.PythonRequirementsLambdaLayer}
    events:
      - schedule: rate(1 hour)
    alarms:
      - functionErrors
      - functionThrottles

  cognitoPreSignUp:
    name: ${self:provider.stackName}-cognitoPreSignUp
    handler: app.handlers.cognito.pre_sign_up
    events:
      - cognitoUserPool:
          pool: '-' # translated to `CognitoUserPool` by serveless
          trigger: PreSignUp
    alarms:
      - functionCognitoServerErrors
      - functionThrottles

  cognitoPreAuth:
    name: ${self:provider.stackName}-cognitoPreAuth
    handler: app.handlers.cognito.pre_auth
    events:
      - cognitoUserPool:
          pool: '-' # translated to `CognitoUserPool` by serveless
          trigger: PreAuthentication
    alarms:
      - functionCognitoServerErrors
      - functionThrottles

  cognitoCustomMessage:
    name: ${self:provider.stackName}-cognitoCustomMessage
    handler: app.handlers.cognito.custom_message
    events:
      - cognitoUserPool:
          pool: '-' # translated to `CognitoUserPool` by serveless
          trigger: CustomMessage
    alarms:
      - functionCognitoServerErrors
      - functionThrottles

  dynamoStream:
    name: ${self:provider.stackName}-dynamoStream
    handler: app.handlers.elasticsearch.dynamodb_stream
    layers:
      - ${cf:real-${self:provider.stage}-lambda-layers.PythonRequirementsLambdaLayer}
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt DynamoDbTable.StreamArn
    alarms:
      - functionErrors
      - functionThrottles

# keep this miminal for smaller packages and thus faster deployments
package:
  exclude:
    - ./**
  include:
    - app/**/*.py
    - mapping-templates/**
    - fonts/*.ttf
    - requirements.txt
    - schema.graphql

plugins:
  - serverless-appsync-plugin
  - serverless-pseudo-parameters
  - serverless-plugin-aws-alerts
  - serverless-plugin-split-stacks
  - serverless-plugin-git-variables
