#!/usr/bin/env node

/* eslint no-unused-vars: 0 */

const AWS = require('aws-sdk')
const AWSAppSyncClient = require('aws-appsync').default
const dotenv = require('dotenv')
const fs = require('fs')
const gql = require('graphql-tag')
const util = require('util')
const uuidv4 = require('uuid/v4')
require('isomorphic-fetch')

dotenv.config()

const awsRegion = process.env.AWS_REGION
if (awsRegion === undefined) throw new Error('Env var AWS_REGION must be defined')

const appsyncApiUrl = process.env.APPSYNC_API_URL
if (appsyncApiUrl === undefined) throw new Error('Env var APPSYNC_API_URL must be defined')

if (process.argv.length != 3) {
  console.log('Usage: run.gql.js <tokens/credential file generated by sign-user-in.js>')
  process.exit(1)
}

const tokensCreds = JSON.parse(fs.readFileSync(process.argv[2]))
const cognitoAccessToken = tokensCreds['tokens']['AccessToken']
const authProvider = tokensCreds['authProvider']

const awsCredentials = new AWS.Credentials(
  tokensCreds['credentials']['AccessKeyId'],
  tokensCreds['credentials']['SecretKey'],
  tokensCreds['credentials']['SessionToken'],
)

const appsyncClient = new AWSAppSyncClient({
  url: appsyncApiUrl,
  region: awsRegion,
  auth: {
    type: 'AWS_IAM',
    credentials: awsCredentials,
  },
  disableOffline: true,
}, {
  defaultOptions: {
    query: {
      fetchPolicy: 'network-only',
      errorPolicy: 'all',
    },
  },
})


const createCognitoOnlyUser = gql(
  `mutation CreateCognitoOnlyUser ($username: String!, $fullName: String) {
    createCognitoOnlyUser (username: $username, fullName: $fullName) {
      userId
      username
      fullName
      email
      phoneNumber
    }
  }`
)

const createGoogleUser = gql(
  `mutation CreateGoogleUser ($username: String!, $fullName: String, $googleIdToken: String!) {
    createGoogleUser (username: $username, fullName: $fullName, googleIdToken: $googleIdToken) {
      userId
      username
      fullName
      email
      phoneNumber
    }
  }`
)

const startChangeUserEmail = gql(`mutation StartChangeUserEmail ($email: AWSEmail!) {
  startChangeUserEmail (email: $email) {
    userId
    username
    email
    phoneNumber
  }
}`)

const finishChangeUserEmail = gql(
  `mutation FinishChangeUserEmail ($cognitoAccessToken: String!, $verificationCode: String!) {
    finishChangeUserEmail (cognitoAccessToken: $cognitoAccessToken, verificationCode: $verificationCode) {
      userId
      username
      email
      phoneNumber
    }
  }`
)

const startChangeUserPhoneNumber = gql(`mutation StartChangeUserPhoneNumber ($phoneNumber: AWSPhone!) {
  startChangeUserPhoneNumber (phoneNumber: $phoneNumber) {
    userId
    username
    email
    phoneNumber
  }
}`)

const finishChangeUserPhoneNumber = gql(
  `mutation FinishChangeUserPhoneNumber ($cognitoAccessToken: String!, $verificationCode: String!) {
    finishChangeUserPhoneNumber (cognitoAccessToken: $cognitoAccessToken, verificationCode: $verificationCode) {
      userId
      username
      email
      phoneNumber
    }
  }`
)

const setUserDetails = gql(`mutation SetUserDetails {
  setUserDetails (fullName: "Miss. Purple", bio: "millions of peaches") {
    userId
    username
    fullName
    bio
    email
    phoneNumber
    photoUrl
  }
}`)

const followUser = gql(`mutation FollowUser {
  followUser (userId: "us-east-1:4ded2ca8-4384-4a51-a432-3c2f73c53cfc") {
    userId
    username
  }
}`)

const unfollowUser = gql(`mutation UnfollowUser {
  unfollowUser (userId: "us-east-1:4ded2ca8-4384-4a51-a432-3c2f73c53cfc") {
    userId
    username
  }
}`)

const getAddTextPost = () => gql(`mutation AddTextPost {
  addPost (postId: "${uuidv4()}", text: "the best weather, the best") {
    postId
    postedAt
    postedBy {
      userId
      username
    }
    postStatus
    text
    mediaObjects {
      mediaId
      mediaType
      mediaStatus
      url
      uploadUrl
    }
  }
}`)

const getAddMediaPost = gql(`mutation AddMediaPost {
  addPost (
    postId: "${uuidv4()}",
    mediaObjectUploads: [{mediaId: "${uuidv4()}", type: IMAGE}, {mediaId: "${uuidv4()}", type: VIDEO}]
  ) {
    postId
    postedAt
    postedBy {
      userId
      username
    }
    postStatus
    text
    mediaObjects {
      mediaId
      mediaType
      mediaStatus
      url
      uploadUrl
    }
  }
}`)

const getAddTextAndMediaPost = () => gql(`mutation AddTextAndMediaPost {
  addPost (
    postId: "${uuidv4()}",
    text: "best cat video, ever."
    mediaObjectUploads: [{mediaId: "mid3", type: VIDEO}]
  ) {
    postId
    postedAt
    postedBy {
      userId
      username
    }
    postStatus
    text
    mediaObjects {
      mediaId
      mediaType
      mediaStatus
      url
      uploadUrl
    }
  }
}`)

const querySelf = gql(`{
  self {
    userId
    username
    fullName
    bio
    email
    phoneNumber
    photoUrl
  }
}`)

const searchUsers = gql(`{
  searchUsers (searchToken: "me") {
    items {
      userId
      username
      fullName
      bio
      followedStatus
      followerStatus
      email
      phoneNumber
      followedStatus
      followerStatus
    }
    nextToken
  }
}`)

const getFollowedUsers = gql(`{
  getFollowedUsers {
    items {
      userId
      username
    }
    nextToken
  }
}`)

const getFollowerUsers = gql(`{
  getFollowerUsers {
    items {
      userId
      username
    }
    nextToken
  }
}`)

const selfPosts = gql(`{
  self {
    posts (limit: 3) {
      items {
        postId
        postedAt
        postedBy {
          userId
          username
        }
        postStatus
        text
        mediaObjects {
          mediaId
          mediaType
          mediaStatus
          url
          uploadUrl
        }
      }
      nextToken
    }
  }
}`)

const getMediaObjects = gql(`{
  getMediaObjects {
    items {
      mediaId
      mediaType
      mediaStatus
      url
      uploadUrl
    }
    nextToken
  }
}`)

const selfFeed = gql(`{
  self {
    feed (limit: 3) {
      items {
        postId
        postedAt
        postedBy {
          userId
          username
        }
        postStatus
        text
        mediaObjects {
          mediaId
          mediaType
          mediaStatus
          url
          uploadUrl
        }
      }
      nextToken
    }
  }
}`)

const reportPostViews = gql(`mutation ReportPostView {
  reportPostViews(postIds: ["${uuidv4()}", "${uuidv4()}"])
}`)

const trendingPosts = gql(`{
  trendingPosts {
    items {
      postId
      postedBy {
        userId
        email
      }
    }
  }
}`)

const trendingUsers = gql(`{
  trendingUsers {
    items {
      userId
      email
    }
  }
}`)

const resetUser = gql(`mutation ResetUser {
  resetUser {
    userId
  }
}`)


const lambdaClientError = gql(`mutation LambdaClientError {
  lambdaClientError (arg1: "test-arg1", arg2: "test-arg2")
}`)

const lambdaServerError = gql(`mutation LambdaServerError {
  lambdaServerError (arg1: "test-arg1", arg2: "test-arg2")
}`)

const dynamoServerError = gql(`mutation DynamoServerError {
  dynamoServerError (arg1: "test-arg1", arg2: "test-arg2")
}`)

async function main() {
  const resp = await appsyncClient.mutate({
    mutation: createCognitoOnlyUser,
    variables: {username: uuidv4().substring(24), fullName: 'my full name'},
  })
  /*
  const resp = await appsyncClient.mutate({mutation: resetUser})
  const resp = await appsyncClient.mutate({
    mutation: startChangeUserEmail,
    variables: {email: ''},
  })
  const resp = await appsyncClient.mutate({
    mutation: finishChangeUserEmail,
    variables: {cognitoAccessToken, verificationCode: ''},
  })
  const resp = await appsyncClient.mutate({
    mutation: startChangeUserPhoneNumber,
    variables: {phoneNumber: ''},
  })
  const resp = await appsyncClient.mutate({
    mutation: finishChangeUserPhoneNumber,
    variables: {cognitoAccessToken, verificationCode: ''},
  })
  */
  //const resp = await appsyncClient.query({ query: querySelf })
  // log object to full depth https://stackoverflow.com/a/10729284
  console.log(util.inspect(resp, false, null, true))
}

main()
